-- RemoteEvent Catcher with Lua Code Format
-- Запускается с локального лаунчера игры

local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")

local player = Players.LocalPlayer

-- Создание основного GUI
local RemoteEventCatcher = Instance.new("ScreenGui")
RemoteEventCatcher.Name = "RemoteEventCatcher"
RemoteEventCatcher.Parent = CoreGui
RemoteEventCatcher.ResetOnSpawn = false

-- Основной фрейм
local MainFrame = Instance.new("Frame")
MainFrame.Name = "MainFrame"
MainFrame.Size = UDim2.new(0, 700, 0, 600)
MainFrame.Position = UDim2.new(0.5, -350, 0.5, -300)
MainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
MainFrame.BorderSizePixel = 0
MainFrame.Parent = RemoteEventCatcher

-- Заголовок
local Title = Instance.new("TextLabel")
Title.Name = "Title"
Title.Size = UDim2.new(1, 0, 0, 40)
Title.Position = UDim2.new(0, 0, 0, 0)
Title.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
Title.Text = "RemoteEvent Catcher - Lua Code Format"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 16
Title.Font = Enum.Font.GothamBold
Title.Parent = MainFrame

-- Кнопка сворачивания
local ToggleButton = Instance.new("TextButton")
ToggleButton.Name = "ToggleButton"
ToggleButton.Size = UDim2.new(0, 100, 0, 30)
ToggleButton.Position = UDim2.new(1, -110, 0, 5)
ToggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
ToggleButton.Text = "Свернуть"
ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleButton.TextSize = 12
ToggleButton.Parent = MainFrame

-- Левая панель - список событий
local EventsPanel = Instance.new("Frame")
EventsPanel.Name = "EventsPanel"
EventsPanel.Size = UDim2.new(0.35, -5, 1, -100)
EventsPanel.Position = UDim2.new(0, 10, 0, 50)
EventsPanel.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
EventsPanel.BorderSizePixel = 0
EventsPanel.Parent = MainFrame

local EventsTitle = Instance.new("TextLabel")
EventsTitle.Name = "EventsTitle"
EventsTitle.Size = UDim2.new(1, 0, 0, 30)
EventsTitle.Position = UDim2.new(0, 0, 0, 0)
EventsTitle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
EventsTitle.Text = "Перехваченные события (0)"
EventsTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
EventsTitle.TextSize = 14
EventsTitle.Parent = EventsPanel

local EventsFrame = Instance.new("ScrollingFrame")
EventsFrame.Name = "EventsFrame"
EventsFrame.Size = UDim2.new(1, 0, 1, -30)
EventsFrame.Position = UDim2.new(0, 0, 0, 30)
EventsFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
EventsFrame.BorderSizePixel = 0
EventsFrame.ScrollBarThickness = 8
EventsFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
EventsFrame.Parent = EventsPanel

local EventsListLayout = Instance.new("UIListLayout")
EventsListLayout.Name = "EventsListLayout"
EventsListLayout.Padding = UDim.new(0, 5)
EventsListLayout.Parent = EventsFrame

-- Правая панель - код события
local CodePanel = Instance.new("Frame")
CodePanel.Name = "CodePanel"
CodePanel.Size = UDim2.new(0.65, -15, 1, -100)
CodePanel.Position = UDim2.new(0.35, 5, 0, 50)
CodePanel.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
CodePanel.BorderSizePixel = 0
CodePanel.Parent = MainFrame

local CodeTitle = Instance.new("TextLabel")
CodeTitle.Name = "CodeTitle"
CodeTitle.Size = UDim2.new(1, 0, 0, 30)
CodeTitle.Position = UDim2.new(0, 0, 0, 0)
CodeTitle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
CodeTitle.Text = "Код события"
CodeTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
CodeTitle.TextSize = 14
CodeTitle.Parent = CodePanel

local CodeFrame = Instance.new("ScrollingFrame")
CodeFrame.Name = "CodeFrame"
CodeFrame.Size = UDim2.new(1, -10, 1, -40)
CodeFrame.Position = UDim2.new(0, 5, 0, 35)
CodeFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
CodeFrame.BorderSizePixel = 0
CodeFrame.ScrollBarThickness = 8
CodeFrame.VerticalScrollBarInset = Enum.ScrollBarInset.Always
CodeFrame.Parent = CodePanel

local CodeText = Instance.new("TextLabel")
CodeText.Name = "CodeText"
CodeText.Size = UDim2.new(1, -20, 0, 0)
CodeText.Position = UDim2.new(0, 10, 0, 10)
CodeText.BackgroundTransparency = 1
CodeText.Text = "Выберите событие для просмотра кода"
CodeText.TextColor3 = Color3.fromRGB(200, 200, 200)
CodeText.TextSize = 12
CodeText.TextXAlignment = Enum.TextXAlignment.Left
CodeText.TextYAlignment = Enum.TextYAlignment.Top
CodeText.TextWrapped = true
CodeText.Font = Enum.Font.Code
CodeText.AutomaticSize = Enum.AutomaticSize.Y
CodeText.Parent = CodeFrame

-- Панель управления
local ControlPanel = Instance.new("Frame")
ControlPanel.Name = "ControlPanel"
ControlPanel.Size = UDim2.new(1, -20, 0, 40)
ControlPanel.Position = UDim2.new(0, 10, 1, -50)
ControlPanel.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
ControlPanel.BorderSizePixel = 0
ControlPanel.Parent = MainFrame

local ClearButton = Instance.new("TextButton")
ClearButton.Name = "ClearButton"
ClearButton.Size = UDim2.new(0.25, -5, 1, 0)
ClearButton.Position = UDim2.new(0, 0, 0, 0)
ClearButton.BackgroundColor3 = Color3.fromRGB(200, 60, 60)
ClearButton.Text = "Очистить все"
ClearButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ClearButton.TextSize = 12
ClearButton.Parent = ControlPanel

local RefreshButton = Instance.new("TextButton")
RefreshButton.Name = "RefreshButton"
RefreshButton.Size = UDim2.new(0.25, -5, 1, 0)
RefreshButton.Position = UDim2.new(0.25, 5, 0, 0)
RefreshButton.BackgroundColor3 = Color3.fromRGB(60, 120, 200)
RefreshButton.Text = "Обновить"
RefreshButton.TextColor3 = Color3.fromRGB(255, 255, 255)
RefreshButton.TextSize = 12
RefreshButton.Parent = ControlPanel

local CopyButton = Instance.new("TextButton")
CopyButton.Name = "CopyButton"
CopyButton.Size = UDim2.new(0.25, -5, 1, 0)
CopyButton.Position = UDim2.new(0.5, 10, 0, 0)
CopyButton.BackgroundColor3 = Color3.fromRGB(60, 150, 60)
CopyButton.Text = "Копировать код"
CopyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CopyButton.TextSize = 12
CopyButton.Parent = ControlPanel

local ExecuteButton = Instance.new("TextButton")
ExecuteButton.Name = "ExecuteButton"
ExecuteButton.Size = UDim2.new(0.25, -5, 1, 0)
ExecuteButton.Position = UDim2.new(0.75, 15, 0, 0)
ExecuteButton.BackgroundColor3 = Color3.fromRGB(150, 100, 60)
ExecuteButton.Text = "Выполнить"
ExecuteButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ExecuteButton.TextSize = 12
ExecuteButton.Parent = ControlPanel

-- Переменные для хранения данных
local capturedEvents = {}
local originalFunctions = {}
local selectedEvent = nil
local isMinimized = false

-- Функция для преобразования значения в строку Lua
local function valueToString(value, indent)
    indent = indent or 0
    local indentStr = string.rep("    ", indent)
    local valueType = type(value)
    
    if valueType == "string" then
        -- Экранирование специальных символов
        local escaped = string.gsub(value, "[%c%z]", function(c)
            return string.format("\\%03d", string.byte(c))
        end)
        return "\"" .. escaped .. "\""
    elseif valueType == "number" then
        return tostring(value)
    elseif valueType == "boolean" then
        return tostring(value)
    elseif valueType == "table" then
        local result = "{\n"
        local nextIndent = indent + 1
        local nextIndentStr = string.rep("    ", nextIndent)
        
        for k, v in pairs(value) do
            local keyStr = type(k) == "string" and k or "[" .. tostring(k) .. "]"
            result = result .. nextIndentStr .. keyStr .. " = " .. valueToString(v, nextIndent) .. ",\n"
        end
        
        return result .. indentStr .. "}"
    else
        return "nil -- " .. tostring(value)
    end
end

-- Функция для форматирования кода в стиле вашего примера
local function formatEventCode(eventData, callIndex)
    if not eventData or not eventData.Calls or #eventData.Calls == 0 then
        return "-- Нет данных о вызовах"
    end
    
    local callData = callIndex and eventData.Calls[callIndex] or eventData.Calls[#eventData.Calls]
    if not callData then return "-- Нет данных" end
    
    local code = ""
    
    -- Форматируем аргументы как в вашем примере
    code = code .. "local args = {\n"
    
    for i, arg in ipairs(callData.Arguments) do
        code = code .. "    " .. valueToString(arg, 1) .. ",\n"
    end
    
    code = code .. "}\n\n"
    
    -- Получаем путь к RemoteEvent
    local eventPath = eventData.Object:GetFullName()
    local parentName = eventData.Object.Parent and eventData.Object.Parent.Name or "ReplicatedStorage"
    
    -- Форматируем вызов как в вашем примере
    code = code .. "game:GetService(\"ReplicatedStorage\"):WaitForChild(\"" .. parentName .. "\"):WaitForChild(\"" .. eventData.Object.Name .. "\"):FireServer(unpack(args))"
    
    return code
end

-- Функция для поиска RemoteEvents
local function findRemoteEvents(parent)
    local events = {}
    
    for _, child in ipairs(parent:GetDescendants()) do
        if child:IsA("RemoteEvent") then
            table.insert(events, {
                Object = child,
                Path = child:GetFullName(),
                Calls = {},
                IsIntercepted = false
            })
        end
    end
    
    return events
end

-- Функция перехвата RemoteEvent
local function interceptRemoteEvent(remoteEvent)
    if capturedEvents[remoteEvent] then return end
    
    local eventData = {
        Object = remoteEvent,
        Path = remoteEvent:GetFullName(),
        Calls = {},
        IsIntercepted = true
    }
    
    capturedEvents[remoteEvent] = eventData
    
    -- Сохраняем оригинальную функцию
    originalFunctions[remoteEvent] = remoteEvent.FireServer
    
    -- Перехватываем FireServer
    remoteEvent.FireServer = function(self, ...)
        local args = {...}
        local callData = {
            Timestamp = os.date("%H:%M:%S"),
            Arguments = args,
            CallId = #eventData.Calls + 1
        }
        
        table.insert(eventData.Calls, callData)
        
        -- Обновляем UI если выбрано это событие
        if selectedEvent == eventData then
            updateCodeDisplay(eventData)
        end
        
        -- Вызываем оригинальную функцию
        return originalFunctions[remoteEvent](self, unpack(args))
    end
end

-- Функция создания UI элемента события
local function createEventUI(eventData)
    local eventFrame = Instance.new("Frame")
    eventFrame.Name = "Event_" .. eventData.Object.Name
    eventFrame.Size = UDim2.new(1, -10, 0, 70)
    eventFrame.Position = UDim2.new(0, 5, 0, 0)
    eventFrame.BackgroundColor3 = selectedEvent == eventData and Color3.fromRGB(70, 70, 90) or Color3.fromRGB(50, 50, 50)
    eventFrame.BorderSizePixel = 0
    eventFrame.Parent = EventsFrame
    
    local eventName = Instance.new("TextLabel")
    eventName.Name = "Name"
    eventName.Size = UDim2.new(1, -10, 0, 20)
    eventName.Position = UDim2.new(0, 5, 0, 5)
    eventName.BackgroundTransparency = 1
    eventName.Text = eventData.Object.Name
    eventName.TextColor3 = Color3.fromRGB(255, 255, 255)
    eventName.TextSize = 12
    eventName.TextXAlignment = Enum.TextXAlignment.Left
    eventName.TextTruncate = Enum.TextTruncate.AtEnd
    eventName.Parent = eventFrame
    
    local eventPath = Instance.new("TextLabel")
    eventPath.Name = "Path"
    eventPath.Size = UDim2.new(1, -10, 0, 15)
    eventPath.Position = UDim2.new(0, 5, 0, 25)
    eventPath.BackgroundTransparency = 1
    eventPath.Text = string.sub(eventData.Path, 1, 35) .. (string.len(eventData.Path) > 35 and "..." or "")
    eventPath.TextColor3 = Color3.fromRGB(180, 180, 180)
    eventPath.TextSize = 10
    eventPath.TextXAlignment = Enum.TextXAlignment.Left
    eventPath.Parent = eventFrame
    
    local callCount = Instance.new("TextLabel")
    callCount.Name = "Calls"
    callCount.Size = UDim2.new(1, -10, 0, 15)
    callCount.Position = UDim2.new(0, 5, 0, 40)
    callCount.BackgroundTransparency = 1
    callCount.Text = "Вызовы: " .. #eventData.Calls
    callCount.TextColor3 = Color3.fromRGB(100, 200, 100)
    callCount.TextSize = 10
    callCount.TextXAlignment = Enum.TextXAlignment.Left
    callCount.Parent = eventFrame
    
    local selectButton = Instance.new("TextButton")
    selectButton.Name = "Select"
    selectButton.Size = UDim2.new(0, 60, 0, 20)
    selectButton.Position = UDim2.new(1, -65, 0, 5)
    selectButton.BackgroundColor3 = Color3.fromRGB(60, 120, 200)
    selectButton.Text = "Выбрать"
    selectButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    selectButton.TextSize = 10
    selectButton.Parent = eventFrame
    
    selectButton.MouseButton1Click:Connect(function()
        selectedEvent = eventData
        updateCodeDisplay(eventData)
        updateEventsList()
    end)
    
    return eventFrame
end

-- Функция обновления отображения кода
local function updateCodeDisplay(eventData)
    if not eventData then
        CodeText.Text = "Выберите событие для просмотра кода"
        CodeTitle.Text = "Код события"
        return
    end
    
    local code = formatEventCode(eventData)
    CodeText.Text = code
    CodeTitle.Text = "Код: " .. eventData.Object.Name .. " (" .. #eventData.Calls .. " вызовов)"
    
    -- Автоматически подстраиваем размер скролл фрейма
    CodeFrame.CanvasSize = UDim2.new(0, 0, 0, CodeText.TextBounds.Y + 20)
end

-- Функция обновления списка событий
local function updateEventsList()
    -- Очищаем список
    for _, child in ipairs(EventsFrame:GetChildren()) do
        if child:IsA("Frame") and string.find(child.Name, "Event_") then
            child:Destroy()
        end
    end
    
    -- Обновляем заголовок
    local eventCount = 0
    for _ in pairs(capturedEvents) do eventCount = eventCount + 1 end
    EventsTitle.Text = "Перехваченные события (" .. eventCount .. ")"
    
    -- Добавляем события
    for _, eventData in pairs(capturedEvents) do
        if eventData.IsIntercepted then
            createEventUI(eventData)
        end
    end
end

-- Функция поиска и перехвата всех RemoteEvents
local function interceptAllRemoteEvents()
    local events = findRemoteEvents(game)
    
    for _, eventData in ipairs(events) do
        interceptRemoteEvent(eventData.Object)
    end
    
    updateEventsList()
end

-- Функция очистки всех событий
local function clearAllEvents()
    for _, eventData in pairs(capturedEvents) do
        eventData.Calls = {}
    end
    updateCodeDisplay(selectedEvent)
    updateEventsList()
end

-- Функция копирования кода
local function copyCodeToClipboard()
    if selectedEvent and selectedEvent.Calls and #selectedEvent.Calls > 0 then
        local code = formatEventCode(selectedEvent)
        print("=== КОД ДЛЯ КОПИРОВАНИЯ ===")
        print(code)
        print("=== КОНЕЦ КОДА ===")
        
        -- Уведомление
        showNotification("Код скопирован в консоль!", Color3.fromRGB(60, 150, 60))
    end
end

-- Функция выполнения кода
local function executeCurrentCode()
    if selectedEvent and selectedEvent.Calls and #selectedEvent.Calls > 0 then
        local callData = selectedEvent.Calls[#selectedEvent.Calls]
        local success, result = pcall(function()
            selectedEvent.Object:FireServer(unpack(callData.Arguments))
        end)
        
        if success then
            showNotification("Код выполнен успешно!", Color3.fromRGB(60, 150, 60))
        else
            showNotification("Ошибка выполнения: " .. tostring(result), Color3.fromRGB(200, 60, 60))
        end
    end
end

-- Функция показа уведомления
local function showNotification(message, color)
    local notification = Instance.new("TextLabel")
    notification.Size = UDim2.new(0, 300, 0, 40)
    notification.Position = UDim2.new(0.5, -150, 0.8, -20)
    notification.BackgroundColor3 = color
    notification.Text = message
    notification.TextColor3 = Color3.fromRGB(255, 255, 255)
    notification.TextSize = 14
    notification.ZIndex = 100
    notification.Parent = RemoteEventCatcher
    
    wait(3)
    notification:Destroy()
end

-- Обработчики кнопок
ClearButton.MouseButton1Click:Connect(clearAllEvents)
RefreshButton.MouseButton1Click:Connect(interceptAllRemoteEvents)
CopyButton.MouseButton1Click:Connect(copyCodeToClipboard)
ExecuteButton.MouseButton1Click:Connect(executeCurrentCode)

-- Функция сворачивания/разворачивания
ToggleButton.MouseButton1Click:Connect(function()
    if isMinimized then
        MainFrame.Size = UDim2.new(0, 700, 0, 600)
        EventsPanel.Visible = true
        CodePanel.Visible = true
        ControlPanel.Visible = true
        ToggleButton.Text = "Свернуть"
        isMinimized = false
    else
        MainFrame.Size = UDim2.new(0, 700, 0, 40)
        EventsPanel.Visible = false
        CodePanel.Visible = false
        ControlPanel.Visible = false
        ToggleButton.Text = "Развернуть"
        isMinimized = true
    end
end)

-- Перетаскивание окна
local dragging = false
local dragInput, dragStart, startPos

local function update(input)
    local delta = input.Position - dragStart
    MainFrame.Position = UDim2.new(0, startPos.X.Offset + delta.X, 0.5, -300)
end

Title.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

Title.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)

-- Автоматический перехват новых RemoteEvents
game.DescendantAdded:Connect(function(descendant)
    if descendant:IsA("RemoteEvent") then
        wait(0.5)
        interceptRemoteEvent(descendant)
        updateEventsList()
    end
end)

-- Начальная инициализация
interceptAllRemoteEvents()

-- Очистка при выходе
game:GetService("Players").PlayerRemoving:Connect(function(leavingPlayer)
    if leavingPlayer == player then
        -- Восстанавливаем оригинальные функции
        for remoteEvent, originalFunc in pairs(originalFunctions) do
            remoteEvent.FireServer = originalFunc
        end
        RemoteEventCatcher:Destroy()
    end
end)

print("RemoteEvent Catcher загружен! Меню доступно в интерфейсе.")
